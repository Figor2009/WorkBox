
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  cnpj      String?  @unique
  users     User[]
  branches  Branch[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Branch {
  id         Int           @id @default(autoincrement())
  name       String
  address    String?
  companyId  Int
  company    Company       @relation(fields: [companyId], references: [id])
  patrimony  Patrimony[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Patrimony {
  id          Int                 @id @default(autoincrement())
  code        String              @unique
  description String
  value       Float
  status      String              @default("ativo")
  branchId    Int
  branch      Branch              @relation(fields: [branchId], references: [id])
  movements   PatrimonyMovement[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model PatrimonyMovement {
  id           Int        @id @default(autoincrement())
  patrimonyId  Int
  patrimony    Patrimony  @relation(fields: [patrimonyId], references: [id])
  fromBranchId Int?
  toBranchId   Int
  reason       String
  movedAt      DateTime   @default(now())
}

model Product {
  id             Int            @id @default(autoincrement())
  name           String
  description    String?
  sku            String         @unique
  categoryId     Int?
  category       Category?      @relation(fields: [categoryId], references: [id])
  stock          Float          @default(0)
  stockMovements StockMovement[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model StockMovement {
  id        Int        @id @default(autoincrement())
  productId Int
  product   Product    @relation(fields: [productId], references: [id])
  type      String     // "entry" ou "exit"
  quantity  Float
  reason    String?
  createdAt DateTime   @default(now())
}